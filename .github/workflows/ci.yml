name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-coverage:
    name: Run Tests & Generate Coverage
    runs-on: ${{ steps.determine-runner.outputs.runner }}
    
    steps:
      - name: Determine runner
        id: determine-runner
        run: |
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'self-hosted') }}" == "true" ]]; then
            echo "runner=self-hosted" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'ubuntu-latest') }}" == "true" ]]; then
            echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
          else
            echo "runner=${{ vars.DEFAULT_RUNNER || 'ubuntu-latest' }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust (nightly)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install build dependencies (self-hosted only)
        if: contains(runner.name, 'self-hosted')
        run: |
          if ! pkg-config --version &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y build-essential libssl-dev pkg-config libgmp-dev
          fi

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
          
      - name: Determine test mode
        id: test-mode
        run: |
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'unit-tests-only') }}" == "true" ]]; then
            echo "mode=lib" >> $GITHUB_OUTPUT
          else
            echo "mode=${{ vars.DEFAULT_TEST_MODE || 'full' }}" >> $GITHUB_OUTPUT
          fi

      - name: Run tests and generate coverage
        run: cargo llvm-cov --lcov --output-path lcov.info ${{ steps.test-mode.outputs.mode == 'lib' && '--lib' || '' }}

      - name: Upload coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: lcov.info
